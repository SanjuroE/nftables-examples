#!/usr/sbin/nft -f

flush ruleset

table inet filter {

    set droplist {
        type ipv4_addr;
        flags interval;
        elements = {
            1.2.3.4,
            2.3.4.5,
            2.3.4.6-2.3.4.10,
            2.4.5.0/24
        };
    }

    set droplist6 {
        type ipv6_addr;
        flags interval;
        elements = {
            3333:1:1:1::1
        };
    }

    set icmp4 {
        type icmp_type . icmp_code;
        elements = {
            echo-request . 0,
            echo-reply . 0,
            destination-unreachable . frag-needed,
            time-exceeded . 0
        };
    }

    set icmp6 {
        type icmpv6_type . icmpv6_code;
        flags interval;
        elements = {
            destination-unreachable . 0-6,
            packet-too-big . 0,
            time-exceeded . 0-1,
            parameter-problem . 0-2,
            echo-request . 0,
            echo-reply . 0,
            mld-listener-query . 0,
            mld-listener-report . 0,
            mld-listener-done . 0,
            nd-router-solicit . 0,
            nd-router-advert . 0,
            nd-neighbor-solicit . 0,
            nd-neighbor-advert . 0,
            ind-neighbor-solicit . 0,
            ind-neighbor-advert . 0,
            mld2-listener-report . 0,
            148 . 0,
            149 . 0,
            151 . 0,
            152 . 0,
            153 . 0
        };
    }

    map priority_map {
        type inet_service : classid;
        elements = {
            22: 1,
            80: 2,
            443: 2
        };
    }

    map verdict_map {
        type ipv4_addr : verdict;
        elements = {
            1.1.2.2: accept,
            2.2.1.1: drop
        };
    }

    chain input {
        type filter hook input priority 0;

        ct state established,related counter accept;

        ip saddr @droplist drop;
        ip6 saddr @droplist6 drop;

        icmp type . icmp code @icmp4 accept;
        icmpv6 type . icmpv6 code @icmp6 accept;

        tcp dport 22 counter accept;

        tcp dport {80, 443} accept;

        meta priority set tcp dport map @priority_map;

        ip saddr vmap @verdict_map;

        counter log prefix "DROP:" drop;
    }
    chain forward {
        type filter hook forward priority 0;
    }
    chain output {
        type filter hook output priority 0;
    }
}
